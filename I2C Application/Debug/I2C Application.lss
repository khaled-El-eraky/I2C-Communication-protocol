
I2C Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000062a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000062a  0000069e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006aa  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000c8  00000000  00000000  000006da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001afd  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000733  00000000  00000000  0000229f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000823  00000000  00000000  000029d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000013c  00000000  00000000  000031f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000043e  00000000  00000000  00003334  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000a40  00000000  00000000  00003772  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  000041b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 bf 02 	call	0x57e	; 0x57e <main>
  7a:	0c 94 13 03 	jmp	0x626	; 0x626 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <TWI_Init>:
	/*SET the BitRate as F_CPU=16MHz and SCL_F=100KHz
	 *From Equation >> SCL_F=CPU Clock frequency/(16+2(TWBR).4^TWPS)
	 *Where 4^TWPS is the prescaler and = 1 >> TWPS0=0,TWPS1=0
	 *So, TWBR = 72
	 */
	TWBR = BitRrate_Register;
  82:	88 e4       	ldi	r24, 0x48	; 72
  84:	80 b9       	out	0x00, r24	; 0
	CLEARBIT(TWSR,TWPS0);
  86:	08 98       	cbi	0x01, 0	; 1
	CLEARBIT(TWSR,TWPS1);
  88:	09 98       	cbi	0x01, 1	; 1
	
	/*Enable I2C*/
	SETBIT(TWCR,TWEN);
  8a:	b2 9a       	sbi	0x16, 2	; 22
  8c:	08 95       	ret

0000008e <TWI_SendByte>:

/*Static Function to send the Start Condition*/
static void TWI_SendStartCondition(void)
{
	/* Clear stop, start and ACK Enable bits and keep the state of remain bits */
	CLEARBIT(TWCR,TWSTO);
  8e:	b4 98       	cbi	0x16, 4	; 22
	CLEARBIT(TWCR,TWSTA);
  90:	b5 98       	cbi	0x16, 5	; 22
	CLEARBIT(TWCR,TWEA);
  92:	b6 98       	cbi	0x16, 6	; 22
	
	/* SET the start bit */
	SETBIT(TWCR,TWSTA);
  94:	b5 9a       	sbi	0x16, 5	; 22
	
	/* Clear the Interrupt Flag By Setting It */
	SETBIT(TWCR,TWINT);
  96:	b7 9a       	sbi	0x16, 7	; 22
	
	while (READBIT(TWCR,TWINT) == 0)
  98:	b7 9b       	sbis	0x16, 7	; 22
  9a:	fe cf       	rjmp	.-4      	; 0x98 <TWI_SendByte+0xa>
	{
		/*Handel the Error*/
	}
	
	/*Send SLA + WR*/
	TWI_WriteData((SlaveAddress<<1) | WriteMode);
  9c:	88 0f       	add	r24, r24

/*Static Function to write new data to Data Register>>TWDR*/
static void TWI_WriteData(uint8_t data)
{
	/* Clear stop,Start and ACK Enable bits */
	CLEARBIT(TWCR,TWSTA);
  9e:	b5 98       	cbi	0x16, 5	; 22
	CLEARBIT(TWCR,TWSTO);
  a0:	b4 98       	cbi	0x16, 4	; 22
	CLEARBIT(TWCR,TWEA);
  a2:	b6 98       	cbi	0x16, 6	; 22
	
	/* Write Data */
	TWDR = data;
  a4:	83 b9       	out	0x03, r24	; 3
	
	/* Clear the Interrupt Flag By Setting It */
	SETBIT(TWCR,TWINT);
  a6:	b7 9a       	sbi	0x16, 7	; 22
	
	while (READBIT(TWCR,TWINT) == 0)
  a8:	b7 9b       	sbis	0x16, 7	; 22
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <TWI_SendByte+0x1a>

/*Static Function to write new data to Data Register>>TWDR*/
static void TWI_WriteData(uint8_t data)
{
	/* Clear stop,Start and ACK Enable bits */
	CLEARBIT(TWCR,TWSTA);
  ac:	b5 98       	cbi	0x16, 5	; 22
	CLEARBIT(TWCR,TWSTO);
  ae:	b4 98       	cbi	0x16, 4	; 22
	CLEARBIT(TWCR,TWEA);
  b0:	b6 98       	cbi	0x16, 6	; 22
	
	/* Write Data */
	TWDR = data;
  b2:	63 b9       	out	0x03, r22	; 3
	
	/* Clear the Interrupt Flag By Setting It */
	SETBIT(TWCR,TWINT);
  b4:	b7 9a       	sbi	0x16, 7	; 22
	
	while (READBIT(TWCR,TWINT) == 0)
  b6:	b7 9b       	sbis	0x16, 7	; 22
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <TWI_SendByte+0x28>

/*Static Function to write new data to Data Register>>TWDR*/
static void TWI_WriteData(uint8_t data)
{
	/* Clear stop,Start and ACK Enable bits */
	CLEARBIT(TWCR,TWSTA);
  ba:	b5 98       	cbi	0x16, 5	; 22
	CLEARBIT(TWCR,TWSTO);
  bc:	b4 98       	cbi	0x16, 4	; 22
	CLEARBIT(TWCR,TWEA);
  be:	b6 98       	cbi	0x16, 6	; 22
	
	/* Write Data */
	TWDR = data;
  c0:	43 b9       	out	0x03, r20	; 3
	
	/* Clear the Interrupt Flag By Setting It */
	SETBIT(TWCR,TWINT);
  c2:	b7 9a       	sbi	0x16, 7	; 22
	
	while (READBIT(TWCR,TWINT) == 0)
  c4:	b7 9b       	sbis	0x16, 7	; 22
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <TWI_SendByte+0x36>

/*Static Function to send the Stop Condition*/
static void TWI_SendStopCondition(void)
{
	/* Clear stop,Start and ACK Enable bits */
	CLEARBIT(TWCR,TWSTA);
  c8:	b5 98       	cbi	0x16, 5	; 22
	CLEARBIT(TWCR,TWSTO);
  ca:	b4 98       	cbi	0x16, 4	; 22
	CLEARBIT(TWCR,TWEA);
  cc:	b6 98       	cbi	0x16, 6	; 22
	
	/* SET the Stop bit */
	SETBIT(TWCR,TWSTO);
  ce:	b4 9a       	sbi	0x16, 4	; 22
	
	/* Clear the Interrupt Flag By Setting It */
	SETBIT(TWCR,TWINT);
  d0:	b7 9a       	sbi	0x16, 7	; 22
	
	while (READBIT(TWCR,TWINT) == 0)
  d2:	b7 9b       	sbis	0x16, 7	; 22
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <TWI_SendByte+0x44>
		/*Handel the Error*/
	}
	
	/* Send Stop Condition */
	TWI_SendStopCondition();
}
  d6:	08 95       	ret

000000d8 <TWI_ReadByte>:

/*Static Function to send the Start Condition*/
static void TWI_SendStartCondition(void)
{
	/* Clear stop, start and ACK Enable bits and keep the state of remain bits */
	CLEARBIT(TWCR,TWSTO);
  d8:	b4 98       	cbi	0x16, 4	; 22
	CLEARBIT(TWCR,TWSTA);
  da:	b5 98       	cbi	0x16, 5	; 22
	CLEARBIT(TWCR,TWEA);
  dc:	b6 98       	cbi	0x16, 6	; 22
	
	/* SET the start bit */
	SETBIT(TWCR,TWSTA);
  de:	b5 9a       	sbi	0x16, 5	; 22
	
	/* Clear the Interrupt Flag By Setting It */
	SETBIT(TWCR,TWINT);
  e0:	b7 9a       	sbi	0x16, 7	; 22
	
	while (READBIT(TWCR,TWINT) == 0)
  e2:	b7 9b       	sbis	0x16, 7	; 22
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <TWI_ReadByte+0xa>

/*Static Function to write new data to Data Register>>TWDR*/
static void TWI_WriteData(uint8_t data)
{
	/* Clear stop,Start and ACK Enable bits */
	CLEARBIT(TWCR,TWSTA);
  e6:	b5 98       	cbi	0x16, 5	; 22
	CLEARBIT(TWCR,TWSTO);
  e8:	b4 98       	cbi	0x16, 4	; 22
	CLEARBIT(TWCR,TWEA);
  ea:	b6 98       	cbi	0x16, 6	; 22
	
	/* Write Data */
	TWDR = data;
  ec:	98 2f       	mov	r25, r24
  ee:	99 0f       	add	r25, r25
  f0:	93 b9       	out	0x03, r25	; 3
	
	/* Clear the Interrupt Flag By Setting It */
	SETBIT(TWCR,TWINT);
  f2:	b7 9a       	sbi	0x16, 7	; 22
	
	while (READBIT(TWCR,TWINT) == 0)
  f4:	b7 9b       	sbis	0x16, 7	; 22
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <TWI_ReadByte+0x1c>

/*Static Function to write new data to Data Register>>TWDR*/
static void TWI_WriteData(uint8_t data)
{
	/* Clear stop,Start and ACK Enable bits */
	CLEARBIT(TWCR,TWSTA);
  f8:	b5 98       	cbi	0x16, 5	; 22
	CLEARBIT(TWCR,TWSTO);
  fa:	b4 98       	cbi	0x16, 4	; 22
	CLEARBIT(TWCR,TWEA);
  fc:	b6 98       	cbi	0x16, 6	; 22
	
	/* Write Data */
	TWDR = data;
  fe:	63 b9       	out	0x03, r22	; 3
	
	/* Clear the Interrupt Flag By Setting It */
	SETBIT(TWCR,TWINT);
 100:	b7 9a       	sbi	0x16, 7	; 22
	
	while (READBIT(TWCR,TWINT) == 0)
 102:	b7 9b       	sbis	0x16, 7	; 22
 104:	fe cf       	rjmp	.-4      	; 0x102 <TWI_ReadByte+0x2a>

/*Static Function to send the Start Condition*/
static void TWI_SendStartCondition(void)
{
	/* Clear stop, start and ACK Enable bits and keep the state of remain bits */
	CLEARBIT(TWCR,TWSTO);
 106:	b4 98       	cbi	0x16, 4	; 22
	CLEARBIT(TWCR,TWSTA);
 108:	b5 98       	cbi	0x16, 5	; 22
	CLEARBIT(TWCR,TWEA);
 10a:	b6 98       	cbi	0x16, 6	; 22
	
	/* SET the start bit */
	SETBIT(TWCR,TWSTA);
 10c:	b5 9a       	sbi	0x16, 5	; 22
	
	/* Clear the Interrupt Flag By Setting It */
	SETBIT(TWCR,TWINT);
 10e:	b7 9a       	sbi	0x16, 7	; 22
	
	while (READBIT(TWCR,TWINT) == 0)
 110:	b7 9b       	sbis	0x16, 7	; 22
 112:	fe cf       	rjmp	.-4      	; 0x110 <TWI_ReadByte+0x38>
	{
		/*Handel the Error*/
	}
	
	/* Send SLA + READ*/
	TWI_WriteData((SlaveAddress<<1) | ReadMode);
 114:	88 0f       	add	r24, r24
 116:	81 60       	ori	r24, 0x01	; 1

/*Static Function to write new data to Data Register>>TWDR*/
static void TWI_WriteData(uint8_t data)
{
	/* Clear stop,Start and ACK Enable bits */
	CLEARBIT(TWCR,TWSTA);
 118:	b5 98       	cbi	0x16, 5	; 22
	CLEARBIT(TWCR,TWSTO);
 11a:	b4 98       	cbi	0x16, 4	; 22
	CLEARBIT(TWCR,TWEA);
 11c:	b6 98       	cbi	0x16, 6	; 22
	
	/* Write Data */
	TWDR = data;
 11e:	83 b9       	out	0x03, r24	; 3
	
	/* Clear the Interrupt Flag By Setting It */
	SETBIT(TWCR,TWINT);
 120:	b7 9a       	sbi	0x16, 7	; 22
	
	while (READBIT(TWCR,TWINT) == 0)
 122:	b7 9b       	sbis	0x16, 7	; 22
 124:	fe cf       	rjmp	.-4      	; 0x122 <TWI_ReadByte+0x4a>

/*Static Function to Read data without sending ACK*/
static uint8_t TWI_ReadData_NACK(void)
{
	/* Clear stop,Start and ACK Enable bits */
	CLEARBIT(TWCR,TWSTA);
 126:	b5 98       	cbi	0x16, 5	; 22
	CLEARBIT(TWCR,TWSTO);
 128:	b4 98       	cbi	0x16, 4	; 22
	CLEARBIT(TWCR,TWEA);
 12a:	b6 98       	cbi	0x16, 6	; 22
	
	/* Disable the Acknowledge Bit>> Stop operation*/
	
	/* Clear the Interrupt Flag By Setting It */
	SETBIT(TWCR,TWINT);
 12c:	b7 9a       	sbi	0x16, 7	; 22
	
	while (READBIT(TWCR,TWINT) == 0)
 12e:	b7 9b       	sbis	0x16, 7	; 22
 130:	fe cf       	rjmp	.-4      	; 0x12e <TWI_ReadByte+0x56>
	{
		/* Wait Till data is Received */
	}
	return TWDR;
 132:	83 b1       	in	r24, 0x03	; 3

/*Static Function to send the Stop Condition*/
static void TWI_SendStopCondition(void)
{
	/* Clear stop,Start and ACK Enable bits */
	CLEARBIT(TWCR,TWSTA);
 134:	b5 98       	cbi	0x16, 5	; 22
	CLEARBIT(TWCR,TWSTO);
 136:	b4 98       	cbi	0x16, 4	; 22
	CLEARBIT(TWCR,TWEA);
 138:	b6 98       	cbi	0x16, 6	; 22
	
	/* SET the Stop bit */
	SETBIT(TWCR,TWSTO);
 13a:	b4 9a       	sbi	0x16, 4	; 22
	
	/* Clear the Interrupt Flag By Setting It */
	SETBIT(TWCR,TWINT);
 13c:	b7 9a       	sbi	0x16, 7	; 22
	
	while (READBIT(TWCR,TWINT) == 0)
 13e:	b7 9b       	sbis	0x16, 7	; 22
 140:	fe cf       	rjmp	.-4      	; 0x13e <TWI_ReadByte+0x66>
	
	/* Send Stop Condtion */
	TWI_SendStopCondition();
	
	return ReceivedData;
 142:	08 95       	ret

00000144 <ADXL345_Init>:

#define MEASUREMODE_CODE           (0X04) 

void ADXL345_Init(void)
{
	TWI_Init();
 144:	0e 94 41 00 	call	0x82	; 0x82 <TWI_Init>
	TWI_SendByte(ADXL345_MAIN_ADDRESS,POWERCTRL_REGISTER,MEASUREMODE_CODE);
 148:	44 e0       	ldi	r20, 0x04	; 4
 14a:	6d e2       	ldi	r22, 0x2D	; 45
 14c:	8d e1       	ldi	r24, 0x1D	; 29
 14e:	0e 94 47 00 	call	0x8e	; 0x8e <TWI_SendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	8f e3       	ldi	r24, 0x3F	; 63
 154:	9c e9       	ldi	r25, 0x9C	; 156
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <ADXL345_Init+0x12>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <ADXL345_Init+0x18>
 15c:	00 00       	nop
 15e:	08 95       	ret

00000160 <ADXL345_ReadAxis>:
	return TAB;
}

 
uint8_t ADXL345_ReadAxis(ADXL345_SelectAxis Axis)
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
	unsigned short Result = 0;
	switch(Axis)
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	41 f1       	breq	.+80     	; 0x1b8 <ADXL345_ReadAxis+0x58>
 168:	d0 f0       	brcs	.+52     	; 0x19e <ADXL345_ReadAxis+0x3e>
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	a1 f4       	brne	.+40     	; 0x196 <ADXL345_ReadAxis+0x36>
		/* Read MSB */
		Result |= (TWI_ReadByte(ADXL345_MAIN_ADDRESS,Y1_AXIS_REGISTER) << 8);
		break;
		case Z_AXIS:
		/* Read LSB */
		Result = TWI_ReadByte(ADXL345_MAIN_ADDRESS,Z0_AXIS_REGISTER);
 16e:	66 e3       	ldi	r22, 0x36	; 54
 170:	8d e1       	ldi	r24, 0x1D	; 29
 172:	0e 94 6c 00 	call	0xd8	; 0xd8 <TWI_ReadByte>
 176:	c8 2f       	mov	r28, r24
 178:	8f e9       	ldi	r24, 0x9F	; 159
 17a:	9f e0       	ldi	r25, 0x0F	; 15
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <ADXL345_ReadAxis+0x1c>
 180:	00 c0       	rjmp	.+0      	; 0x182 <ADXL345_ReadAxis+0x22>
 182:	00 00       	nop
		_delay_ms(1);
		/* Read MSB */
		Result |= (TWI_ReadByte(ADXL345_MAIN_ADDRESS,Z1_AXIS_REGISTER) << 8);
 184:	67 e3       	ldi	r22, 0x37	; 55
 186:	8d e1       	ldi	r24, 0x1D	; 29
 188:	0e 94 6c 00 	call	0xd8	; 0xd8 <TWI_ReadByte>
 18c:	8c 2f       	mov	r24, r28
 18e:	81 95       	neg	r24
		break;
	}
	/*Get Two's compliment of Result*/ 
	Result = ~Result + 1;
	return Result;
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

 
uint8_t ADXL345_ReadAxis(ADXL345_SelectAxis Axis)
{
	unsigned short Result = 0;
	switch(Axis)
 196:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	/*Get Two's compliment of Result*/ 
	Result = ~Result + 1;
	return Result;
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret
	unsigned short Result = 0;
	switch(Axis)
	{
		case X_AXIS:
		/* Read LSB */
		Result = TWI_ReadByte(ADXL345_MAIN_ADDRESS,X0_AXIS_REGISTER);
 19e:	62 e3       	ldi	r22, 0x32	; 50
 1a0:	8d e1       	ldi	r24, 0x1D	; 29
 1a2:	0e 94 6c 00 	call	0xd8	; 0xd8 <TWI_ReadByte>
 1a6:	c8 2f       	mov	r28, r24
 1a8:	8f e9       	ldi	r24, 0x9F	; 159
 1aa:	9f e0       	ldi	r25, 0x0F	; 15
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <ADXL345_ReadAxis+0x4c>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <ADXL345_ReadAxis+0x52>
 1b2:	00 00       	nop
		_delay_ms(1);
		/* Read MSB */
		Result |= (TWI_ReadByte(ADXL345_MAIN_ADDRESS,X1_AXIS_REGISTER) << 8);
 1b4:	63 e3       	ldi	r22, 0x33	; 51
 1b6:	e7 cf       	rjmp	.-50     	; 0x186 <ADXL345_ReadAxis+0x26>
		break;	
		case Y_AXIS:
		/* Read LSB */
		Result = TWI_ReadByte(ADXL345_MAIN_ADDRESS,Y0_AXIS_REGISTER);
 1b8:	64 e3       	ldi	r22, 0x34	; 52
 1ba:	8d e1       	ldi	r24, 0x1D	; 29
 1bc:	0e 94 6c 00 	call	0xd8	; 0xd8 <TWI_ReadByte>
 1c0:	c8 2f       	mov	r28, r24
 1c2:	8f e9       	ldi	r24, 0x9F	; 159
 1c4:	9f e0       	ldi	r25, 0x0F	; 15
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <ADXL345_ReadAxis+0x66>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <ADXL345_ReadAxis+0x6c>
 1cc:	00 00       	nop
		_delay_ms(1);
		/* Read MSB */
		Result |= (TWI_ReadByte(ADXL345_MAIN_ADDRESS,Y1_AXIS_REGISTER) << 8);
 1ce:	65 e3       	ldi	r22, 0x35	; 53
 1d0:	da cf       	rjmp	.-76     	; 0x186 <ADXL345_ReadAxis+0x26>

000001d2 <LCD_init>:
	static void Send_instruction(uint8_t instruction);

	void LCD_init(void)
	{
		/* Set The Control Pins Direction to OUtput */
		LCD_CONTROL_IO->ddr.allRegister |=(1<<E) | (1<<RW) | (1<<RS);
 1d2:	8a b3       	in	r24, 0x1a	; 26
 1d4:	87 60       	ori	r24, 0x07	; 7
 1d6:	8a bb       	out	0x1a, r24	; 26
			LCD_CONTROL_IO->ddr.allRegister =0xFF;
		#else
			
			#if Upper_Data_port
				/* Set The Direction of The Upper Pins to OP*/
			LCD_Data_IO->ddr.allRegister |=(0xF0);
 1d8:	8a b3       	in	r24, 0x1a	; 26
 1da:	80 6f       	ori	r24, 0xF0	; 240
 1dc:	8a bb       	out	0x1a, r24	; 26
	
	void Send_instruction(uint8_t instruction)
	{

		/* RW, RS Should be 0 when Writing instructions to LCD */
		CLEARBIT(LCD_CONTROL_IO->port.allRegister,RS);
 1de:	d8 98       	cbi	0x1b, 0	; 27
		CLEARBIT(LCD_CONTROL_IO->port.allRegister,RW);
 1e0:	d9 98       	cbi	0x1b, 1	; 27
 1e2:	8f e9       	ldi	r24, 0x9F	; 159
 1e4:	9f e0       	ldi	r25, 0x0F	; 15
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCD_init+0x14>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LCD_init+0x1a>
 1ec:	00 00       	nop
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		
		/* Enable LCD E=1 */
		SETBIT(LCD_CONTROL_IO->port.allRegister,E);
 1ee:	da 9a       	sbi	0x1b, 2	; 27
 1f0:	8f e9       	ldi	r24, 0x9F	; 159
 1f2:	9f e0       	ldi	r25, 0x0F	; 15
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCD_init+0x22>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LCD_init+0x28>
 1fa:	00 00       	nop
			_delay_ms(1); 
		#else 
			
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_IO->port.allRegister &=0x0F;
 1fc:	8b b3       	in	r24, 0x1b	; 27
 1fe:	8f 70       	andi	r24, 0x0F	; 15
 200:	8b bb       	out	0x1b, r24	; 27
				LCD_Data_IO->port.allRegister |= (instruction & 0xF0);
 202:	8b b3       	in	r24, 0x1b	; 27
 204:	8b bb       	out	0x1b, r24	; 27
 206:	8f e9       	ldi	r24, 0x9F	; 159
 208:	9f e0       	ldi	r25, 0x0F	; 15
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <LCD_init+0x38>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <LCD_init+0x3e>
 210:	00 00       	nop
			#endif
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
		
			/* disable LCD E=0 */
			CLEARBIT(LCD_CONTROL_IO->port.allRegister,E);
 212:	da 98       	cbi	0x1b, 2	; 27
 214:	8f e9       	ldi	r24, 0x9F	; 159
 216:	9f e0       	ldi	r25, 0x0F	; 15
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_init+0x46>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_init+0x4c>
 21e:	00 00       	nop
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			
			/* Enable LCD E=1 */
			SETBIT(LCD_CONTROL_IO->port.allRegister,E);
 220:	da 9a       	sbi	0x1b, 2	; 27
 222:	8f e9       	ldi	r24, 0x9F	; 159
 224:	9f e0       	ldi	r25, 0x0F	; 15
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <LCD_init+0x54>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <LCD_init+0x5a>
 22c:	00 00       	nop
			/* delay for processing PW min 450ns */
			_delay_ms(1);
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_IO->port.allRegister &=0x0F;
 22e:	8b b3       	in	r24, 0x1b	; 27
 230:	8f 70       	andi	r24, 0x0F	; 15
 232:	8b bb       	out	0x1b, r24	; 27
				LCD_Data_IO->port.allRegister |= ((instruction <<4) );
 234:	dd 9a       	sbi	0x1b, 5	; 27
 236:	8f e9       	ldi	r24, 0x9F	; 159
 238:	9f e0       	ldi	r25, 0x0F	; 15
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_init+0x68>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_init+0x6e>
 240:	00 00       	nop
				LCD_Data_IO->port.allRegister |= ((instruction) & 0x0f);
			#endif
				/* Data set-up time delay  Tdsw = 195 ns */
				_delay_ms(1);
				/* disable LCD E=0 */
				CLEARBIT(LCD_CONTROL_IO->port.allRegister,E);
 242:	da 98       	cbi	0x1b, 2	; 27
 244:	8f e9       	ldi	r24, 0x9F	; 159
 246:	9f e0       	ldi	r25, 0x0F	; 15
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <LCD_init+0x76>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <LCD_init+0x7c>
 24e:	00 00       	nop
	
	void Send_instruction(uint8_t instruction)
	{

		/* RW, RS Should be 0 when Writing instructions to LCD */
		CLEARBIT(LCD_CONTROL_IO->port.allRegister,RS);
 250:	d8 98       	cbi	0x1b, 0	; 27
		CLEARBIT(LCD_CONTROL_IO->port.allRegister,RW);
 252:	d9 98       	cbi	0x1b, 1	; 27
 254:	8f e9       	ldi	r24, 0x9F	; 159
 256:	9f e0       	ldi	r25, 0x0F	; 15
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCD_init+0x86>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <LCD_init+0x8c>
 25e:	00 00       	nop
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		
		/* Enable LCD E=1 */
		SETBIT(LCD_CONTROL_IO->port.allRegister,E);
 260:	da 9a       	sbi	0x1b, 2	; 27
 262:	8f e9       	ldi	r24, 0x9F	; 159
 264:	9f e0       	ldi	r25, 0x0F	; 15
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <LCD_init+0x94>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <LCD_init+0x9a>
 26c:	00 00       	nop
			_delay_ms(1); 
		#else 
			
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_IO->port.allRegister &=0x0F;
 26e:	8b b3       	in	r24, 0x1b	; 27
 270:	8f 70       	andi	r24, 0x0F	; 15
 272:	8b bb       	out	0x1b, r24	; 27
				LCD_Data_IO->port.allRegister |= (instruction & 0xF0);
 274:	dd 9a       	sbi	0x1b, 5	; 27
 276:	8f e9       	ldi	r24, 0x9F	; 159
 278:	9f e0       	ldi	r25, 0x0F	; 15
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <LCD_init+0xa8>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <LCD_init+0xae>
 280:	00 00       	nop
			#endif
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
		
			/* disable LCD E=0 */
			CLEARBIT(LCD_CONTROL_IO->port.allRegister,E);
 282:	da 98       	cbi	0x1b, 2	; 27
 284:	8f e9       	ldi	r24, 0x9F	; 159
 286:	9f e0       	ldi	r25, 0x0F	; 15
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <LCD_init+0xb6>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <LCD_init+0xbc>
 28e:	00 00       	nop
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			
			/* Enable LCD E=1 */
			SETBIT(LCD_CONTROL_IO->port.allRegister,E);
 290:	da 9a       	sbi	0x1b, 2	; 27
 292:	8f e9       	ldi	r24, 0x9F	; 159
 294:	9f e0       	ldi	r25, 0x0F	; 15
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <LCD_init+0xc4>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <LCD_init+0xca>
 29c:	00 00       	nop
			/* delay for processing PW min 450ns */
			_delay_ms(1);
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_IO->port.allRegister &=0x0F;
 29e:	8b b3       	in	r24, 0x1b	; 27
 2a0:	8f 70       	andi	r24, 0x0F	; 15
 2a2:	8b bb       	out	0x1b, r24	; 27
				LCD_Data_IO->port.allRegister |= ((instruction <<4) );
 2a4:	df 9a       	sbi	0x1b, 7	; 27
 2a6:	8f e9       	ldi	r24, 0x9F	; 159
 2a8:	9f e0       	ldi	r25, 0x0F	; 15
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCD_init+0xd8>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <LCD_init+0xde>
 2b0:	00 00       	nop
				LCD_Data_IO->port.allRegister |= ((instruction) & 0x0f);
			#endif
				/* Data set-up time delay  Tdsw = 195 ns */
				_delay_ms(1);
				/* disable LCD E=0 */
				CLEARBIT(LCD_CONTROL_IO->port.allRegister,E);
 2b2:	da 98       	cbi	0x1b, 2	; 27
 2b4:	8f e9       	ldi	r24, 0x9F	; 159
 2b6:	9f e0       	ldi	r25, 0x0F	; 15
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <LCD_init+0xe6>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <LCD_init+0xec>
 2be:	00 00       	nop
	
	void Send_instruction(uint8_t instruction)
	{

		/* RW, RS Should be 0 when Writing instructions to LCD */
		CLEARBIT(LCD_CONTROL_IO->port.allRegister,RS);
 2c0:	d8 98       	cbi	0x1b, 0	; 27
		CLEARBIT(LCD_CONTROL_IO->port.allRegister,RW);
 2c2:	d9 98       	cbi	0x1b, 1	; 27
 2c4:	8f e9       	ldi	r24, 0x9F	; 159
 2c6:	9f e0       	ldi	r25, 0x0F	; 15
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCD_init+0xf6>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <LCD_init+0xfc>
 2ce:	00 00       	nop
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		
		/* Enable LCD E=1 */
		SETBIT(LCD_CONTROL_IO->port.allRegister,E);
 2d0:	da 9a       	sbi	0x1b, 2	; 27
 2d2:	8f e9       	ldi	r24, 0x9F	; 159
 2d4:	9f e0       	ldi	r25, 0x0F	; 15
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <LCD_init+0x104>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <LCD_init+0x10a>
 2dc:	00 00       	nop
			_delay_ms(1); 
		#else 
			
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_IO->port.allRegister &=0x0F;
 2de:	8b b3       	in	r24, 0x1b	; 27
 2e0:	8f 70       	andi	r24, 0x0F	; 15
 2e2:	8b bb       	out	0x1b, r24	; 27
				LCD_Data_IO->port.allRegister |= (instruction & 0xF0);
 2e4:	8b b3       	in	r24, 0x1b	; 27
 2e6:	8b bb       	out	0x1b, r24	; 27
 2e8:	8f e9       	ldi	r24, 0x9F	; 159
 2ea:	9f e0       	ldi	r25, 0x0F	; 15
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCD_init+0x11a>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <LCD_init+0x120>
 2f2:	00 00       	nop
			#endif
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
		
			/* disable LCD E=0 */
			CLEARBIT(LCD_CONTROL_IO->port.allRegister,E);
 2f4:	da 98       	cbi	0x1b, 2	; 27
 2f6:	8f e9       	ldi	r24, 0x9F	; 159
 2f8:	9f e0       	ldi	r25, 0x0F	; 15
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCD_init+0x128>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_init+0x12e>
 300:	00 00       	nop
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			
			/* Enable LCD E=1 */
			SETBIT(LCD_CONTROL_IO->port.allRegister,E);
 302:	da 9a       	sbi	0x1b, 2	; 27
 304:	8f e9       	ldi	r24, 0x9F	; 159
 306:	9f e0       	ldi	r25, 0x0F	; 15
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCD_init+0x136>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <LCD_init+0x13c>
 30e:	00 00       	nop
			/* delay for processing PW min 450ns */
			_delay_ms(1);
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_IO->port.allRegister &=0x0F;
 310:	8b b3       	in	r24, 0x1b	; 27
 312:	8f 70       	andi	r24, 0x0F	; 15
 314:	8b bb       	out	0x1b, r24	; 27
				LCD_Data_IO->port.allRegister |= ((instruction <<4) );
 316:	8b b3       	in	r24, 0x1b	; 27
 318:	80 6c       	ori	r24, 0xC0	; 192
 31a:	8b bb       	out	0x1b, r24	; 27
 31c:	8f e9       	ldi	r24, 0x9F	; 159
 31e:	9f e0       	ldi	r25, 0x0F	; 15
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCD_init+0x14e>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_init+0x154>
 326:	00 00       	nop
				LCD_Data_IO->port.allRegister |= ((instruction) & 0x0f);
			#endif
				/* Data set-up time delay  Tdsw = 195 ns */
				_delay_ms(1);
				/* disable LCD E=0 */
				CLEARBIT(LCD_CONTROL_IO->port.allRegister,E);
 328:	da 98       	cbi	0x1b, 2	; 27
 32a:	8f e9       	ldi	r24, 0x9F	; 159
 32c:	9f e0       	ldi	r25, 0x0F	; 15
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <LCD_init+0x15c>
 332:	00 c0       	rjmp	.+0      	; 0x334 <LCD_init+0x162>
 334:	00 00       	nop
	
	void Send_instruction(uint8_t instruction)
	{

		/* RW, RS Should be 0 when Writing instructions to LCD */
		CLEARBIT(LCD_CONTROL_IO->port.allRegister,RS);
 336:	d8 98       	cbi	0x1b, 0	; 27
		CLEARBIT(LCD_CONTROL_IO->port.allRegister,RW);
 338:	d9 98       	cbi	0x1b, 1	; 27
 33a:	8f e9       	ldi	r24, 0x9F	; 159
 33c:	9f e0       	ldi	r25, 0x0F	; 15
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <LCD_init+0x16c>
 342:	00 c0       	rjmp	.+0      	; 0x344 <LCD_init+0x172>
 344:	00 00       	nop
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		
		/* Enable LCD E=1 */
		SETBIT(LCD_CONTROL_IO->port.allRegister,E);
 346:	da 9a       	sbi	0x1b, 2	; 27
 348:	8f e9       	ldi	r24, 0x9F	; 159
 34a:	9f e0       	ldi	r25, 0x0F	; 15
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <LCD_init+0x17a>
 350:	00 c0       	rjmp	.+0      	; 0x352 <LCD_init+0x180>
 352:	00 00       	nop
			_delay_ms(1); 
		#else 
			
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_IO->port.allRegister &=0x0F;
 354:	8b b3       	in	r24, 0x1b	; 27
 356:	8f 70       	andi	r24, 0x0F	; 15
 358:	8b bb       	out	0x1b, r24	; 27
				LCD_Data_IO->port.allRegister |= (instruction & 0xF0);
 35a:	8b b3       	in	r24, 0x1b	; 27
 35c:	8b bb       	out	0x1b, r24	; 27
 35e:	8f e9       	ldi	r24, 0x9F	; 159
 360:	9f e0       	ldi	r25, 0x0F	; 15
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <LCD_init+0x190>
 366:	00 c0       	rjmp	.+0      	; 0x368 <LCD_init+0x196>
 368:	00 00       	nop
			#endif
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
		
			/* disable LCD E=0 */
			CLEARBIT(LCD_CONTROL_IO->port.allRegister,E);
 36a:	da 98       	cbi	0x1b, 2	; 27
 36c:	8f e9       	ldi	r24, 0x9F	; 159
 36e:	9f e0       	ldi	r25, 0x0F	; 15
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <LCD_init+0x19e>
 374:	00 c0       	rjmp	.+0      	; 0x376 <LCD_init+0x1a4>
 376:	00 00       	nop
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			
			/* Enable LCD E=1 */
			SETBIT(LCD_CONTROL_IO->port.allRegister,E);
 378:	da 9a       	sbi	0x1b, 2	; 27
 37a:	8f e9       	ldi	r24, 0x9F	; 159
 37c:	9f e0       	ldi	r25, 0x0F	; 15
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <LCD_init+0x1ac>
 382:	00 c0       	rjmp	.+0      	; 0x384 <LCD_init+0x1b2>
 384:	00 00       	nop
			/* delay for processing PW min 450ns */
			_delay_ms(1);
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_IO->port.allRegister &=0x0F;
 386:	8b b3       	in	r24, 0x1b	; 27
 388:	8f 70       	andi	r24, 0x0F	; 15
 38a:	8b bb       	out	0x1b, r24	; 27
				LCD_Data_IO->port.allRegister |= ((instruction <<4) );
 38c:	dc 9a       	sbi	0x1b, 4	; 27
 38e:	8f e9       	ldi	r24, 0x9F	; 159
 390:	9f e0       	ldi	r25, 0x0F	; 15
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <LCD_init+0x1c0>
 396:	00 c0       	rjmp	.+0      	; 0x398 <LCD_init+0x1c6>
 398:	00 00       	nop
				LCD_Data_IO->port.allRegister |= ((instruction) & 0x0f);
			#endif
				/* Data set-up time delay  Tdsw = 195 ns */
				_delay_ms(1);
				/* disable LCD E=0 */
				CLEARBIT(LCD_CONTROL_IO->port.allRegister,E);
 39a:	da 98       	cbi	0x1b, 2	; 27
 39c:	8f e9       	ldi	r24, 0x9F	; 159
 39e:	9f e0       	ldi	r25, 0x0F	; 15
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <LCD_init+0x1ce>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <LCD_init+0x1d4>
 3a6:	00 00       	nop
 3a8:	08 95       	ret

000003aa <LCD_Clear>:
	
	void Send_instruction(uint8_t instruction)
	{

		/* RW, RS Should be 0 when Writing instructions to LCD */
		CLEARBIT(LCD_CONTROL_IO->port.allRegister,RS);
 3aa:	d8 98       	cbi	0x1b, 0	; 27
		CLEARBIT(LCD_CONTROL_IO->port.allRegister,RW);
 3ac:	d9 98       	cbi	0x1b, 1	; 27
 3ae:	8f e9       	ldi	r24, 0x9F	; 159
 3b0:	9f e0       	ldi	r25, 0x0F	; 15
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCD_Clear+0x8>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCD_Clear+0xe>
 3b8:	00 00       	nop
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		
		/* Enable LCD E=1 */
		SETBIT(LCD_CONTROL_IO->port.allRegister,E);
 3ba:	da 9a       	sbi	0x1b, 2	; 27
 3bc:	8f e9       	ldi	r24, 0x9F	; 159
 3be:	9f e0       	ldi	r25, 0x0F	; 15
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <LCD_Clear+0x16>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <LCD_Clear+0x1c>
 3c6:	00 00       	nop
			_delay_ms(1); 
		#else 
			
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_IO->port.allRegister &=0x0F;
 3c8:	8b b3       	in	r24, 0x1b	; 27
 3ca:	8f 70       	andi	r24, 0x0F	; 15
 3cc:	8b bb       	out	0x1b, r24	; 27
				LCD_Data_IO->port.allRegister |= (instruction & 0xF0);
 3ce:	8b b3       	in	r24, 0x1b	; 27
 3d0:	8b bb       	out	0x1b, r24	; 27
 3d2:	8f e9       	ldi	r24, 0x9F	; 159
 3d4:	9f e0       	ldi	r25, 0x0F	; 15
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <LCD_Clear+0x2c>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <LCD_Clear+0x32>
 3dc:	00 00       	nop
			#endif
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
		
			/* disable LCD E=0 */
			CLEARBIT(LCD_CONTROL_IO->port.allRegister,E);
 3de:	da 98       	cbi	0x1b, 2	; 27
 3e0:	8f e9       	ldi	r24, 0x9F	; 159
 3e2:	9f e0       	ldi	r25, 0x0F	; 15
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <LCD_Clear+0x3a>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <LCD_Clear+0x40>
 3ea:	00 00       	nop
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			
			/* Enable LCD E=1 */
			SETBIT(LCD_CONTROL_IO->port.allRegister,E);
 3ec:	da 9a       	sbi	0x1b, 2	; 27
 3ee:	8f e9       	ldi	r24, 0x9F	; 159
 3f0:	9f e0       	ldi	r25, 0x0F	; 15
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <LCD_Clear+0x48>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <LCD_Clear+0x4e>
 3f8:	00 00       	nop
			/* delay for processing PW min 450ns */
			_delay_ms(1);
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_IO->port.allRegister &=0x0F;
 3fa:	8b b3       	in	r24, 0x1b	; 27
 3fc:	8f 70       	andi	r24, 0x0F	; 15
 3fe:	8b bb       	out	0x1b, r24	; 27
				LCD_Data_IO->port.allRegister |= ((instruction <<4) );
 400:	dc 9a       	sbi	0x1b, 4	; 27
 402:	8f e9       	ldi	r24, 0x9F	; 159
 404:	9f e0       	ldi	r25, 0x0F	; 15
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <LCD_Clear+0x5c>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <LCD_Clear+0x62>
 40c:	00 00       	nop
				LCD_Data_IO->port.allRegister |= ((instruction) & 0x0f);
			#endif
				/* Data set-up time delay  Tdsw = 195 ns */
				_delay_ms(1);
				/* disable LCD E=0 */
				CLEARBIT(LCD_CONTROL_IO->port.allRegister,E);
 40e:	da 98       	cbi	0x1b, 2	; 27
 410:	8f e9       	ldi	r24, 0x9F	; 159
 412:	9f e0       	ldi	r25, 0x0F	; 15
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <LCD_Clear+0x6a>
 418:	00 c0       	rjmp	.+0      	; 0x41a <LCD_Clear+0x70>
 41a:	00 00       	nop
 41c:	08 95       	ret

0000041e <LCD_DisplayString>:
		Send_instruction(Clear_display); 
	}
	
	
	void LCD_DisplayString(char * ptr)
	{
 41e:	fc 01       	movw	r30, r24
		while(*ptr != '\0')
 420:	80 81       	ld	r24, Z
 422:	88 23       	and	r24, r24
 424:	09 f4       	brne	.+2      	; 0x428 <LCD_DisplayString+0xa>
 426:	46 c0       	rjmp	.+140    	; 0x4b4 <LCD_DisplayString+0x96>
 428:	31 96       	adiw	r30, 0x01	; 1
	
	
	void LCD_DisplayChar(uint8_t Data)
	{
		/* RW  Should be 0  and RS should be 1 when Writing Data to LCD */
		SETBIT(LCD_CONTROL_IO->port.allRegister,RS);
 42a:	d8 9a       	sbi	0x1b, 0	; 27
		CLEARBIT(LCD_CONTROL_IO->port.allRegister,RW);
 42c:	d9 98       	cbi	0x1b, 1	; 27
 42e:	af e9       	ldi	r26, 0x9F	; 159
 430:	bf e0       	ldi	r27, 0x0F	; 15
 432:	11 97       	sbiw	r26, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <LCD_DisplayString+0x14>
 436:	00 c0       	rjmp	.+0      	; 0x438 <LCD_DisplayString+0x1a>
 438:	00 00       	nop
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		/* Enable LCD E=1 */
		SETBIT(LCD_CONTROL_IO->port.allRegister,E);
 43a:	da 9a       	sbi	0x1b, 2	; 27
 43c:	af e9       	ldi	r26, 0x9F	; 159
 43e:	bf e0       	ldi	r27, 0x0F	; 15
 440:	11 97       	sbiw	r26, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <LCD_DisplayString+0x22>
 444:	00 c0       	rjmp	.+0      	; 0x446 <LCD_DisplayString+0x28>
 446:	00 00       	nop
		#if eight_bitdata
			LCD_Data_IO->port.allRegister=Data;
		#else
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_IO->port.allRegister &=0x0F;
 448:	9b b3       	in	r25, 0x1b	; 27
 44a:	9f 70       	andi	r25, 0x0F	; 15
 44c:	9b bb       	out	0x1b, r25	; 27
				/* Send MSB (4-bits )*/
				LCD_Data_IO->port.allRegister |= (Data & 0xF0);
 44e:	2b b3       	in	r18, 0x1b	; 27
 450:	98 2f       	mov	r25, r24
 452:	90 7f       	andi	r25, 0xF0	; 240
 454:	92 2b       	or	r25, r18
 456:	9b bb       	out	0x1b, r25	; 27
 458:	af e9       	ldi	r26, 0x9F	; 159
 45a:	bf e0       	ldi	r27, 0x0F	; 15
 45c:	11 97       	sbiw	r26, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <LCD_DisplayString+0x3e>
 460:	00 c0       	rjmp	.+0      	; 0x462 <LCD_DisplayString+0x44>
 462:	00 00       	nop
			#endif
				
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
			/* disable LCD E=0 */
			CLEARBIT(LCD_CONTROL_IO->port.allRegister,E);
 464:	da 98       	cbi	0x1b, 2	; 27
 466:	af e9       	ldi	r26, 0x9F	; 159
 468:	bf e0       	ldi	r27, 0x0F	; 15
 46a:	11 97       	sbiw	r26, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <LCD_DisplayString+0x4c>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <LCD_DisplayString+0x52>
 470:	00 00       	nop
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			/* Enable LCD E=1 */
			SETBIT(LCD_CONTROL_IO->port.allRegister,E);
 472:	da 9a       	sbi	0x1b, 2	; 27
				
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_IO->port.allRegister &=0x0F;
 474:	9b b3       	in	r25, 0x1b	; 27
 476:	9f 70       	andi	r25, 0x0F	; 15
 478:	9b bb       	out	0x1b, r25	; 27
				LCD_Data_IO->port.allRegister |= ((Data <<4) & 0xF0);
 47a:	2b b3       	in	r18, 0x1b	; 27
 47c:	b0 e1       	ldi	r27, 0x10	; 16
 47e:	8b 9f       	mul	r24, r27
 480:	c0 01       	movw	r24, r0
 482:	11 24       	eor	r1, r1
 484:	28 2b       	or	r18, r24
 486:	2b bb       	out	0x1b, r18	; 27
 488:	8f e9       	ldi	r24, 0x9F	; 159
 48a:	9f e0       	ldi	r25, 0x0F	; 15
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <LCD_DisplayString+0x6e>
 490:	00 c0       	rjmp	.+0      	; 0x492 <LCD_DisplayString+0x74>
 492:	00 00       	nop
 494:	af e9       	ldi	r26, 0x9F	; 159
 496:	bf e0       	ldi	r27, 0x0F	; 15
 498:	11 97       	sbiw	r26, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <LCD_DisplayString+0x7a>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <LCD_DisplayString+0x80>
 49e:	00 00       	nop
			
			#endif
		/* Data set-up time delay  Tdsw = 195 ns */
		_delay_ms(1);
		/* disable LCD E=0 */
		CLEARBIT(LCD_CONTROL_IO->port.allRegister,E);
 4a0:	da 98       	cbi	0x1b, 2	; 27
 4a2:	8f e9       	ldi	r24, 0x9F	; 159
 4a4:	9f e0       	ldi	r25, 0x0F	; 15
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <LCD_DisplayString+0x88>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <LCD_DisplayString+0x8e>
 4ac:	00 00       	nop
	}
	
	
	void LCD_DisplayString(char * ptr)
	{
		while(*ptr != '\0')
 4ae:	81 91       	ld	r24, Z+
 4b0:	81 11       	cpse	r24, r1
 4b2:	bb cf       	rjmp	.-138    	; 0x42a <LCD_DisplayString+0xc>
 4b4:	08 95       	ret

000004b6 <LCD_DisplayInt>:
		Send_instruction(DDRAM_CONST|Address);
	}
	
	
	void LCD_DisplayInt(unsigned short data)
	{
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	cd b7       	in	r28, 0x3d	; 61
 4bc:	de b7       	in	r29, 0x3e	; 62
 4be:	61 97       	sbiw	r28, 0x11	; 17
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	f8 94       	cli
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4ca:	4a e0       	ldi	r20, 0x0A	; 10
 4cc:	be 01       	movw	r22, r28
 4ce:	6f 5f       	subi	r22, 0xFF	; 255
 4d0:	7f 4f       	sbci	r23, 0xFF	; 255
 4d2:	0e 94 de 02 	call	0x5bc	; 0x5bc <__itoa_ncheck>
	}
	
	
	void LCD_DisplayString(char * ptr)
	{
		while(*ptr != '\0')
 4d6:	89 81       	ldd	r24, Y+1	; 0x01
 4d8:	88 23       	and	r24, r24
 4da:	09 f4       	brne	.+2      	; 0x4de <LCD_DisplayInt+0x28>
 4dc:	47 c0       	rjmp	.+142    	; 0x56c <LCD_DisplayInt+0xb6>
 4de:	fe 01       	movw	r30, r28
 4e0:	32 96       	adiw	r30, 0x02	; 2
	
	
	void LCD_DisplayChar(uint8_t Data)
	{
		/* RW  Should be 0  and RS should be 1 when Writing Data to LCD */
		SETBIT(LCD_CONTROL_IO->port.allRegister,RS);
 4e2:	d8 9a       	sbi	0x1b, 0	; 27
		CLEARBIT(LCD_CONTROL_IO->port.allRegister,RW);
 4e4:	d9 98       	cbi	0x1b, 1	; 27
 4e6:	af e9       	ldi	r26, 0x9F	; 159
 4e8:	bf e0       	ldi	r27, 0x0F	; 15
 4ea:	11 97       	sbiw	r26, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCD_DisplayInt+0x34>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCD_DisplayInt+0x3a>
 4f0:	00 00       	nop
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		/* Enable LCD E=1 */
		SETBIT(LCD_CONTROL_IO->port.allRegister,E);
 4f2:	da 9a       	sbi	0x1b, 2	; 27
 4f4:	af e9       	ldi	r26, 0x9F	; 159
 4f6:	bf e0       	ldi	r27, 0x0F	; 15
 4f8:	11 97       	sbiw	r26, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <LCD_DisplayInt+0x42>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <LCD_DisplayInt+0x48>
 4fe:	00 00       	nop
		#if eight_bitdata
			LCD_Data_IO->port.allRegister=Data;
		#else
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_IO->port.allRegister &=0x0F;
 500:	9b b3       	in	r25, 0x1b	; 27
 502:	9f 70       	andi	r25, 0x0F	; 15
 504:	9b bb       	out	0x1b, r25	; 27
				/* Send MSB (4-bits )*/
				LCD_Data_IO->port.allRegister |= (Data & 0xF0);
 506:	2b b3       	in	r18, 0x1b	; 27
 508:	98 2f       	mov	r25, r24
 50a:	90 7f       	andi	r25, 0xF0	; 240
 50c:	92 2b       	or	r25, r18
 50e:	9b bb       	out	0x1b, r25	; 27
 510:	af e9       	ldi	r26, 0x9F	; 159
 512:	bf e0       	ldi	r27, 0x0F	; 15
 514:	11 97       	sbiw	r26, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <LCD_DisplayInt+0x5e>
 518:	00 c0       	rjmp	.+0      	; 0x51a <LCD_DisplayInt+0x64>
 51a:	00 00       	nop
			#endif
				
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
			/* disable LCD E=0 */
			CLEARBIT(LCD_CONTROL_IO->port.allRegister,E);
 51c:	da 98       	cbi	0x1b, 2	; 27
 51e:	af e9       	ldi	r26, 0x9F	; 159
 520:	bf e0       	ldi	r27, 0x0F	; 15
 522:	11 97       	sbiw	r26, 0x01	; 1
 524:	f1 f7       	brne	.-4      	; 0x522 <LCD_DisplayInt+0x6c>
 526:	00 c0       	rjmp	.+0      	; 0x528 <LCD_DisplayInt+0x72>
 528:	00 00       	nop
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			/* Enable LCD E=1 */
			SETBIT(LCD_CONTROL_IO->port.allRegister,E);
 52a:	da 9a       	sbi	0x1b, 2	; 27
				
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_IO->port.allRegister &=0x0F;
 52c:	9b b3       	in	r25, 0x1b	; 27
 52e:	9f 70       	andi	r25, 0x0F	; 15
 530:	9b bb       	out	0x1b, r25	; 27
				LCD_Data_IO->port.allRegister |= ((Data <<4) & 0xF0);
 532:	2b b3       	in	r18, 0x1b	; 27
 534:	b0 e1       	ldi	r27, 0x10	; 16
 536:	8b 9f       	mul	r24, r27
 538:	c0 01       	movw	r24, r0
 53a:	11 24       	eor	r1, r1
 53c:	28 2b       	or	r18, r24
 53e:	2b bb       	out	0x1b, r18	; 27
 540:	8f e9       	ldi	r24, 0x9F	; 159
 542:	9f e0       	ldi	r25, 0x0F	; 15
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <LCD_DisplayInt+0x8e>
 548:	00 c0       	rjmp	.+0      	; 0x54a <LCD_DisplayInt+0x94>
 54a:	00 00       	nop
 54c:	af e9       	ldi	r26, 0x9F	; 159
 54e:	bf e0       	ldi	r27, 0x0F	; 15
 550:	11 97       	sbiw	r26, 0x01	; 1
 552:	f1 f7       	brne	.-4      	; 0x550 <LCD_DisplayInt+0x9a>
 554:	00 c0       	rjmp	.+0      	; 0x556 <LCD_DisplayInt+0xa0>
 556:	00 00       	nop
			
			#endif
		/* Data set-up time delay  Tdsw = 195 ns */
		_delay_ms(1);
		/* disable LCD E=0 */
		CLEARBIT(LCD_CONTROL_IO->port.allRegister,E);
 558:	da 98       	cbi	0x1b, 2	; 27
 55a:	8f e9       	ldi	r24, 0x9F	; 159
 55c:	9f e0       	ldi	r25, 0x0F	; 15
 55e:	01 97       	sbiw	r24, 0x01	; 1
 560:	f1 f7       	brne	.-4      	; 0x55e <LCD_DisplayInt+0xa8>
 562:	00 c0       	rjmp	.+0      	; 0x564 <LCD_DisplayInt+0xae>
 564:	00 00       	nop
	}
	
	
	void LCD_DisplayString(char * ptr)
	{
		while(*ptr != '\0')
 566:	81 91       	ld	r24, Z+
 568:	81 11       	cpse	r24, r1
 56a:	bb cf       	rjmp	.-138    	; 0x4e2 <LCD_DisplayInt+0x2c>
		char Result[17];
		/* 10 for decimal */
		itoa(data,Result,10);
		/* Display The Result */
		LCD_DisplayString(Result);
 56c:	61 96       	adiw	r28, 0x11	; 17
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	f8 94       	cli
 572:	de bf       	out	0x3e, r29	; 62
 574:	0f be       	out	0x3f, r0	; 63
 576:	cd bf       	out	0x3d, r28	; 61
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	08 95       	ret

0000057e <main>:
#include <util/delay.h>

int main(void)
{
	unsigned short X = 0;
	LCD_init();
 57e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_init>
	LCD_DisplayString("ADxL345");
 582:	80 e6       	ldi	r24, 0x60	; 96
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_DisplayString>
 58a:	2f ef       	ldi	r18, 0xFF	; 255
 58c:	87 ea       	ldi	r24, 0xA7	; 167
 58e:	91 e6       	ldi	r25, 0x61	; 97
 590:	21 50       	subi	r18, 0x01	; 1
 592:	80 40       	sbci	r24, 0x00	; 0
 594:	90 40       	sbci	r25, 0x00	; 0
 596:	e1 f7       	brne	.-8      	; 0x590 <main+0x12>
 598:	00 c0       	rjmp	.+0      	; 0x59a <main+0x1c>
 59a:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear();
 59c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear>
	ADXL345_Init();
 5a0:	0e 94 a2 00 	call	0x144	; 0x144 <ADXL345_Init>
	LCD_DisplayString("X=");
 5a4:	88 e6       	ldi	r24, 0x68	; 104
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_DisplayString>
	LCD_DisplayInt(X);
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_DisplayInt>

	
	
    while(1)
    {
	    X = ADXL345_ReadAxis(X_AXIS);
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	0e 94 b0 00 	call	0x160	; 0x160 <ADXL345_ReadAxis>
 5ba:	fc cf       	rjmp	.-8      	; 0x5b4 <main+0x36>

000005bc <__itoa_ncheck>:
 5bc:	bb 27       	eor	r27, r27
 5be:	4a 30       	cpi	r20, 0x0A	; 10
 5c0:	31 f4       	brne	.+12     	; 0x5ce <__itoa_ncheck+0x12>
 5c2:	99 23       	and	r25, r25
 5c4:	22 f4       	brpl	.+8      	; 0x5ce <__itoa_ncheck+0x12>
 5c6:	bd e2       	ldi	r27, 0x2D	; 45
 5c8:	90 95       	com	r25
 5ca:	81 95       	neg	r24
 5cc:	9f 4f       	sbci	r25, 0xFF	; 255
 5ce:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__utoa_common>

000005d2 <__utoa_ncheck>:
 5d2:	bb 27       	eor	r27, r27

000005d4 <__utoa_common>:
 5d4:	fb 01       	movw	r30, r22
 5d6:	55 27       	eor	r21, r21
 5d8:	aa 27       	eor	r26, r26
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	aa 1f       	adc	r26, r26
 5e0:	a4 17       	cp	r26, r20
 5e2:	10 f0       	brcs	.+4      	; 0x5e8 <__utoa_common+0x14>
 5e4:	a4 1b       	sub	r26, r20
 5e6:	83 95       	inc	r24
 5e8:	50 51       	subi	r21, 0x10	; 16
 5ea:	b9 f7       	brne	.-18     	; 0x5da <__utoa_common+0x6>
 5ec:	a0 5d       	subi	r26, 0xD0	; 208
 5ee:	aa 33       	cpi	r26, 0x3A	; 58
 5f0:	08 f0       	brcs	.+2      	; 0x5f4 <__utoa_common+0x20>
 5f2:	a9 5d       	subi	r26, 0xD9	; 217
 5f4:	a1 93       	st	Z+, r26
 5f6:	00 97       	sbiw	r24, 0x00	; 0
 5f8:	79 f7       	brne	.-34     	; 0x5d8 <__utoa_common+0x4>
 5fa:	b1 11       	cpse	r27, r1
 5fc:	b1 93       	st	Z+, r27
 5fe:	11 92       	st	Z+, r1
 600:	cb 01       	movw	r24, r22
 602:	0c 94 03 03 	jmp	0x606	; 0x606 <strrev>

00000606 <strrev>:
 606:	dc 01       	movw	r26, r24
 608:	fc 01       	movw	r30, r24
 60a:	67 2f       	mov	r22, r23
 60c:	71 91       	ld	r23, Z+
 60e:	77 23       	and	r23, r23
 610:	e1 f7       	brne	.-8      	; 0x60a <strrev+0x4>
 612:	32 97       	sbiw	r30, 0x02	; 2
 614:	04 c0       	rjmp	.+8      	; 0x61e <strrev+0x18>
 616:	7c 91       	ld	r23, X
 618:	6d 93       	st	X+, r22
 61a:	70 83       	st	Z, r23
 61c:	62 91       	ld	r22, -Z
 61e:	ae 17       	cp	r26, r30
 620:	bf 07       	cpc	r27, r31
 622:	c8 f3       	brcs	.-14     	; 0x616 <strrev+0x10>
 624:	08 95       	ret

00000626 <_exit>:
 626:	f8 94       	cli

00000628 <__stop_program>:
 628:	ff cf       	rjmp	.-2      	; 0x628 <__stop_program>
